# Generated by Django 5.0.5 on 2024-05-08 14:05

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(help_text='Text content of the question.')),
                ('question_type', models.CharField(choices=[('MCQ', 'Multiple Choice Question'), ('TF', 'True/False'), ('FIB', 'Fill in the Blanks')], default='MCQ', help_text='Type of the question.', max_length=20)),
                ('points', models.PositiveIntegerField(default=1, help_text='Points awarded for answering this question correctly.')),
                ('last_displayed', models.DateTimeField(blank=True, help_text='Last time the question was displayed.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='QuizUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('total_score', models.PositiveIntegerField(default=0, help_text='Total score accumulated across all quizzes.')),
                ('highest_score', models.PositiveIntegerField(default=0, help_text="Track user's highest score in a quiz.")),
                ('total_quizzes_taken', models.PositiveIntegerField(default=0, help_text='Total number of quizzes taken.')),
                ('average_score', models.FloatField(default=0, help_text='Average score across all quizzes taken.')),
                ('is_superuser', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='Groups to which the user belongs.', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for the user.', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(help_text='Text of the answer.')),
                ('is_correct', models.BooleanField(default=False, help_text='Indicates if the answer is correct.')),
                ('question', models.ForeignKey(help_text='Question to which the answer belongs.', on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='quiz_app.question')),
            ],
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of the quiz.', max_length=255, unique=True)),
                ('description', models.TextField(help_text='Description of the quiz.')),
                ('total_questions', models.PositiveIntegerField(default=0, help_text='Total number of questions in the quiz.')),
                ('total_score', models.PositiveIntegerField(default=100, help_text='Total score for the quiz. 100% by default.')),
                ('difficulty', models.CharField(help_text='Difficulty level of the quiz.', max_length=20)),
                ('time_limit', models.PositiveIntegerField(default=0, help_text='Time limit for completing the quiz (in minutes).')),
                ('max_attempts', models.PositiveIntegerField(default=1, help_text='Maximum number of attempts allowed for the quiz.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(help_text='User who created the quiz.', on_delete=django.db.models.deletion.CASCADE, related_name='quizzes', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='question',
            name='quiz',
            field=models.ForeignKey(help_text='Quiz to which the question belongs.', on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='quiz_app.quiz'),
        ),
        migrations.CreateModel(
            name='UserQuizAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.PositiveIntegerField(default=0, help_text='Score obtained by the user in the quiz.')),
                ('total_questions', models.PositiveIntegerField(default=0, help_text='Total number of questions in the quiz.')),
                ('completed', models.BooleanField(default=False, help_text='Indicates if the user has completed the quiz.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('quiz', models.ForeignKey(help_text='Quiz attempted by the user.', on_delete=django.db.models.deletion.CASCADE, related_name='user_attempts', to='quiz_app.quiz')),
                ('user', models.ForeignKey(help_text='User who attempted the quiz.', on_delete=django.db.models.deletion.CASCADE, related_name='quiz_attempts', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
